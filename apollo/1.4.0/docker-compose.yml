version: '3'

services:
  apollo-portal:
    image: guolin123/apollo-portal:v1.4.0
    restart: unless-stopped
    container_name: apollo-portal
    volumes:
     - '/tmp/logs:/opt/logs'
    ports:
     - "8070:8070"
    environment:
     # 注意修改数据库连接IP/用户名/密码配置
     - spring_datasource_url=jdbc:mysql://10.1.16.22:3306/ApolloPortalDB?characterEncoding=utf8
     - spring_datasource_username=root
     - spring_datasource_password=apollo123Pwd
     # meta server配置，配置参考，如切换到pro，则为-Dpro_meta，后面的地址为configservice的地址
     - JAVA_OPTS="-Ddev_meta=http://10.1.16.22:18080"
    depends_on:
     - apollo-configservice
     - apollo-adminservice


  apollo-configservice:
    image: guolin123/apollo-configservice:v1.4.0
    restart: unless-stopped
    container_name: apollo-configservice
    volumes:
     - '/tmp/logs:/opt/logs'
    ports:
     - "18080:8080"
    environment:
     # 注意修改数据库连接IP/用户名/密码配置
     - spring_datasource_url=jdbc:mysql://10.1.16.22:3306/ApolloConfigDB?characterEncoding=utf8
     - spring_datasource_username=root
     - spring_datasource_password=apollo123Pwd
     # docker默认会注册内部的ip到eureka中，所以部署到外网后会导致client无法访问，需要指定ip或ip+端口，下面2种方式
     #- JAVA_OPTS="-Deureka.instance.ip-address=10.1.16.22"
     - JAVA_OPTS="-Deureka.instance.homePageUrl=http://10.1.16.22:18080"



  apollo-adminservice:
    image: guolin123/apollo-adminservice:v1.4.0
    restart: unless-stopped
    container_name: apollo-adminservice
    volumes:
     - '/tmp/logs:/opt/logs'
    ports:
     - "18090:8090"
    environment:
     # 注意修改数据库连接IP/用户名/密码配置
     - spring_datasource_url=jdbc:mysql://10.1.16.22:3306/ApolloConfigDB?characterEncoding=utf8
     - spring_datasource_username=root
     - spring_datasource_password=apollo123Pwd
     # docker默认会注册内部的ip到eureka中，所以部署到外网后会导致client无法访问，需要指定ip或ip+端口，下面2种方式
     #- JAVA_OPTS="-Deureka.instance.ip-address=10.1.16.22"
     - JAVA_OPTS="-Deureka.instance.homePageUrl=http://10.1.16.22:18090"
    depends_on:
     - apollo-configservice


